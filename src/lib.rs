//! [tui-big-text] is a rust crate that renders large pixel text as a [Ratatui] widget using the
//! glyphs from the [font8x8] crate.
//!
//! ![Hello World example](https://vhs.charm.sh/vhs-2UxNc2SJgiNqHoowbsXAMW.gif)
//!
//! # Installation
//!
//! ```shell
//! cargo add ratatui tui-big-text
//! ```
//!
//! # Usage
//!
//! Create a [`BigText`] widget using `BigTextBuilder` and pass it to [`Frame::render_widget`] to
//! render be rendered. The builder allows you to customize the [`Style`] of the widget and the
//! [`PixelSize`] of the glyphs. The [`PixelSize`] can be used to control how many character cells
//! are used to represent a single pixel of the 8x8 font.
//!
//! # Example
//!
//! ```rust
//! use anyhow::Result;
//! use ratatui::prelude::*;
//! use tui_big_text::{BigTextBuilder, PixelSize};
//!
//! fn render(frame: &mut Frame) -> Result<()> {
//!     let big_text = BigTextBuilder::default()
//!         .pixel_size(PixelSize::Full)
//!         .style(Style::new().blue())
//!         .lines(vec![
//!             "Hello".red().into(),
//!             "World".white().into(),
//!             "~~~~~".into(),
//!         ])
//!         .build()?;
//!     frame.render_widget(big_text, frame.size());
//!     Ok(())
//! }
//! ```
//!
//! [tui-big-text]: https://crates.io/crates/tui-big-text
//! [Ratatui]: https://crates.io/crates/ratatui
//! [font8x8]: https://crates.io/crates/font8x8
//! [`BigText`]: crate::BigText
//! [`PixelSize`]: crate::PixelSize
//! [`Frame::render_widget`]: ratatui::Frame::render_widget
//! [`Style`]: ratatui::style::Style

use std::cmp::min;

use derive_builder::Builder;
use font8x8::UnicodeFonts;
use ratatui::{prelude::*, text::StyledGrapheme, widgets::Widget};

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash, Default)]
pub enum PixelSize {
    #[default]
    /// A pixel from the 8x8 font is represented by a full character cell in the terminal.
    Full,
    /// A pixel from the 8x8 font is represented by a half (upper/lower) character cell in the terminal.
    HalfHeight,
    /// A pixel from the 8x8 font is represented by a half (left/right) character cell in the terminal.
    HalfWidth,
    /// A pixel from the 8x8 font is represented by a quadrant of a character cell in the terminal.
    Quadrant,
    /// A pixel from the 8x8 font is represented by a third (top/middle/bottom) of a character cell in the terminal.
    ThirdHeight,
    /// A pixel from the 8x8 font is represented by a sextant of a character cell in the terminal.
    Sextant,
}

/// Displays one or more lines of text using 8x8 pixel characters.
///
/// The text is rendered using the [font8x8](https://crates.io/crates/font8x8) crate.
///
/// Using the `pixel_size` method, you can also chose, how 'big' a pixel should be.
/// Currently a pixel of the 8x8 font can be represented by one full or half (horizontal/vertical/both) character cell of the terminal.
///
/// # Examples
///
/// ```rust
/// use ratatui::prelude::*;
/// use tui_big_text::{BigTextBuilder, PixelSize};
///
/// BigTextBuilder::default()
///     .pixel_size(PixelSize::Full)
///     .style(Style::new().white())
///     .lines(vec![
///         "Hello".red().into(),
///         "World".blue().into(),
///         "=====".into(),
///     ])
///    .build();
/// ```
///
/// Renders:
///
/// ```plain
/// ‚ñà‚ñà  ‚ñà‚ñà           ‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà
/// ‚ñà‚ñà  ‚ñà‚ñà            ‚ñà‚ñà      ‚ñà‚ñà
/// ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà      ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà
/// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
/// ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
/// ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
/// ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà
///
/// ‚ñà‚ñà   ‚ñà‚ñà                  ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà
/// ‚ñà‚ñà   ‚ñà‚ñà                   ‚ñà‚ñà        ‚ñà‚ñà
/// ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà
/// ‚ñà‚ñà ‚ñà ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà
/// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
/// ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà
/// ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà
///
///  ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà
/// ‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà
/// ```
#[derive(Debug, Builder, Clone, PartialEq, Eq, Hash)]
pub struct BigText<'a> {
    /// The text to display
    #[builder(setter(into))]
    lines: Vec<Line<'a>>,

    /// The style of the widget
    ///
    /// Defaults to `Style::default()`
    #[builder(default)]
    style: Style,

    /// The size of single glyphs
    ///
    /// Defaults to `BigTextSize::default()` (=> BigTextSize::Full)
    #[builder(default)]
    pixel_size: PixelSize,
}

impl Widget for BigText<'_> {
    fn render(self, area: Rect, buf: &mut Buffer) {
        let layout = layout(area, &self.pixel_size);
        for (line, line_layout) in self.lines.iter().zip(layout) {
            for (g, cell) in line.styled_graphemes(self.style).zip(line_layout) {
                render_symbol(g, cell, buf, &self.pixel_size);
            }
        }
    }
}

/// Returns how many cells are needed to display a full 8x8 glyphe using the given font size
fn pixels_per_cell(size: &PixelSize) -> (u16, u16) {
    match size {
        PixelSize::Full => (1, 1),
        PixelSize::HalfHeight => (1, 2),
        PixelSize::HalfWidth => (2, 1),
        PixelSize::Quadrant => (2, 2),
        PixelSize::ThirdHeight => (1, 3),
        PixelSize::Sextant => (2, 3),
    }
}

/// Chunk the area into as many x*y cells as possible returned as a 2D iterator of `Rect`s
/// representing the rows of cells.
/// The size of each cell depends on given font size
fn layout(
    area: Rect,
    pixel_size: &PixelSize,
) -> impl IntoIterator<Item = impl IntoIterator<Item = Rect>> {
    let (step_x, step_y) = pixels_per_cell(pixel_size);
    let width = 8_u16.div_ceil(step_x);
    let height = 8_u16.div_ceil(step_y);

    if let PixelSize::Sextant = pixel_size {
        println!("width: {},   height: {}", width, height);
    }

    (area.top()..area.bottom())
        .step_by(height as usize)
        .map(move |y| {
            (area.left()..area.right())
                .step_by(width as usize)
                .map(move |x| {
                    let width = min(area.right() - x, width);
                    let height = min(area.bottom() - y, height);
                    Rect::new(x, y, width, height)
                })
        })
}

/// Render a single grapheme into a cell by looking up the corresponding 8x8 bitmap in the
/// `BITMAPS` array and setting the corresponding cells in the buffer.
fn render_symbol(grapheme: StyledGrapheme, area: Rect, buf: &mut Buffer, pixel_size: &PixelSize) {
    buf.set_style(area, grapheme.style);
    let c = grapheme.symbol.chars().next().unwrap(); // TODO: handle multi-char graphemes
    if let Some(glyph) = font8x8::BASIC_FONTS.get(c) {
        render_glyph(glyph, area, buf, pixel_size);
    }
}

/// Get the correct unicode symbol for two vertical "pixels"
fn get_symbol_half_height(top: u8, bottom: u8) -> char {
    match top {
        0 => match bottom {
            0 => ' ',
            _ => '‚ñÑ',
        },
        _ => match bottom {
            0 => '‚ñÄ',
            _ => '‚ñà',
        },
    }
}

/// Get the correct unicode symbol for two horizontal "pixels"
fn get_symbol_half_width(left: u8, right: u8) -> char {
    match left {
        0 => match right {
            0 => ' ',
            _ => '‚ñê',
        },
        _ => match right {
            0 => '‚ñå',
            _ => '‚ñà',
        },
    }
}

/// Get the correct unicode symbol for 2x2 "pixels"
fn get_symbol_quadrant_size(
    top_left: u8,
    top_right: u8,
    bottom_left: u8,
    bottom_right: u8,
) -> char {
    let top_left = if top_left > 0 { 1 } else { 0 };
    let top_right = if top_right > 0 { 1 } else { 0 };
    let bottom_left = if bottom_left > 0 { 1 } else { 0 };
    let bottom_right = if bottom_right > 0 { 1 } else { 0 };

    // Reason for using an array here:
    // Most symbols are in order in unicode, but some of them that are already part of another
    // character set and missing in this character set.
    // Therefore, a direct mapping to `character_index` is not possible
    const QUADRANT_SYMBOLS: [char; 16] = [
        ' ', '‚ñò', '‚ñù', '‚ñÄ', '‚ññ', '‚ñå', '‚ñû', '‚ñõ', '‚ñó', '‚ñö', '‚ñê', '‚ñú', '‚ñÑ', '‚ñô', '‚ñü', '‚ñà',
    ];
    let character_index = top_left + (top_right << 1) + (bottom_left << 2) + (bottom_right << 3);

    QUADRANT_SYMBOLS[character_index]
}

/// Get the correct unicode symbol for 2x3 "pixels"
fn get_symbol_sextantant_size(
    top_left: u8,
    top_right: u8,
    middle_left: u8,
    middle_right: u8,
    bottom_left: u8,
    bottom_right: u8,
) -> char {
    let top_left = if top_left > 0 { 1 } else { 0 };
    let top_right = if top_right > 0 { 1 } else { 0 };
    let middle_left = if middle_left > 0 { 1 } else { 0 };
    let middle_right = if middle_right > 0 { 1 } else { 0 };
    let bottom_left = if bottom_left > 0 { 1 } else { 0 };
    let bottom_right = if bottom_right > 0 { 1 } else { 0 };

    // Reason for using an array here:
    // Most symbols are in order in unicode, but some of them that are already part of another
    // character set and missing in this character set.
    // Therefore, a direct mapping to `character_index` is not possible

    const SEXANT_SYMBOLS: [char; 64] = [
        ' ', 'ü¨Ä', 'ü¨Å', 'ü¨Ç', 'ü¨É', 'ü¨Ñ', 'ü¨Ö', 'ü¨Ü', 'ü¨á', 'ü¨à', 'ü¨â', 'ü¨ä', 'ü¨ã', 'ü¨å', 'ü¨ç', 'ü¨é', 'ü¨è', 'ü¨ê',
        'ü¨ë', 'ü¨í', 'ü¨ì', '‚ñå', 'ü¨î', 'ü¨ï', 'ü¨ñ', 'ü¨ó', 'ü¨ò', 'ü¨ô', 'ü¨ö', 'ü¨õ', 'ü¨ú', 'ü¨ù', 'ü¨û', 'ü¨ü', 'ü¨†', 'ü¨°',
        'ü¨¢', 'ü¨£', 'ü¨§', 'ü¨•', 'ü¨¶', 'ü¨ß', '‚ñê', 'ü¨®', 'ü¨©', 'ü¨™', 'ü¨´', 'ü¨¨', 'ü¨≠', 'ü¨Æ', 'ü¨Ø', 'ü¨∞', 'ü¨±', 'ü¨≤',
        'ü¨≥', 'ü¨¥', 'ü¨µ', 'ü¨∂', 'ü¨∑', 'ü¨∏', 'ü¨π', 'ü¨∫', 'ü¨ª', '‚ñà',
    ];
    let character_index = top_left
        + (top_right << 1)
        + (middle_left << 2)
        + (middle_right << 3)
        + (bottom_left << 4)
        + (bottom_right << 5);

    SEXANT_SYMBOLS[character_index]
}

/// Get the correct unicode symbol for 1x3 "pixels"
fn get_symbol_third_height(top: u8, middle: u8, bottom: u8) -> char {
    get_symbol_sextantant_size(top, top, middle, middle, bottom, bottom)
}

/// Render a single 8x8 glyph into a cell by setting the corresponding cells in the buffer.
fn render_glyph(glyph: [u8; 8], area: Rect, buf: &mut Buffer, pixel_size: &PixelSize) {
    let (step_x, step_y) = pixels_per_cell(pixel_size);

    let glyph_vertical_index = (0..glyph.len()).step_by(step_y as usize);
    let glyph_horizontal_bit_selector = (0..8).step_by(step_x as usize);

    for (row, y) in glyph_vertical_index.zip(area.top()..area.bottom()) {
        for (col, x) in glyph_horizontal_bit_selector
            .clone()
            .zip(area.left()..area.right())
        {
            let cell = buf.get_mut(x, y);
            let symbol_character = match pixel_size {
                PixelSize::Full => match glyph[row] & (1 << col) {
                    0 => ' ',
                    _ => '‚ñà',
                },
                PixelSize::HalfHeight => {
                    let top = glyph[row] & (1 << col);
                    let bottom = glyph[row + 1] & (1 << col);
                    get_symbol_half_height(top, bottom)
                }
                PixelSize::HalfWidth => {
                    let left = glyph[row] & (1 << col);
                    let right = glyph[row] & (1 << (col + 1));
                    get_symbol_half_width(left, right)
                }
                PixelSize::Quadrant => {
                    let top_left = glyph[row] & (1 << col);
                    let top_right = glyph[row] & (1 << (col + 1));
                    let bottom_left = glyph[row + 1] & (1 << col);
                    let bottom_right = glyph[row + 1] & (1 << (col + 1));
                    get_symbol_quadrant_size(top_left, top_right, bottom_left, bottom_right)
                }
                PixelSize::ThirdHeight => {
                    let top = glyph[row] & (1 << col);
                    let is_middle_avalable = (row + 1) < glyph.len();
                    let middle = if is_middle_avalable {
                        glyph[row + 1] & (1 << col)
                    } else {
                        0
                    };
                    let is_bottom_avalable = (row + 2) < glyph.len();
                    let bottom = if is_bottom_avalable {
                        glyph[row + 2] & (1 << col)
                    } else {
                        0
                    };
                    get_symbol_third_height(top, middle, bottom)
                }
                PixelSize::Sextant => {
                    let top_left = glyph[row] & (1 << col);
                    let top_right = glyph[row] & (1 << (col + 1));
                    let is_middle_avalable = (row + 1) < glyph.len();
                    let (middle_left, middle_right) = if is_middle_avalable {
                        (
                            glyph[row + 1] & (1 << col),
                            glyph[row + 1] & (1 << (col + 1)),
                        )
                    } else {
                        (0, 0)
                    };
                    let is_bottom_avalable = (row + 2) < glyph.len();
                    let (bottom_left, bottom_right) = if is_bottom_avalable {
                        (
                            glyph[row + 2] & (1 << col),
                            glyph[row + 2] & (1 << (col + 1)),
                        )
                    } else {
                        (0, 0)
                    };
                    get_symbol_sextantant_size(
                        top_left,
                        top_right,
                        middle_left,
                        middle_right,
                        bottom_left,
                        bottom_right,
                    )
                }
            };
            cell.set_char(symbol_character);
        }
    }
}

#[cfg(test)]
mod tests {
    use ratatui::assert_buffer_eq;

    use super::*;

    type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

    #[test]
    fn build() -> Result<()> {
        let lines = vec![Line::from(vec!["Hello".red(), "World".blue()])];
        let style = Style::new().green();
        let pixel_size = PixelSize::default();
        assert_eq!(
            BigTextBuilder::default()
                .lines(lines.clone())
                .style(style)
                .build()?,
            BigText {
                lines,
                style,
                pixel_size
            }
        );
        Ok(())
    }

    #[test]
    fn render_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 80, 8));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            " ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà                     ‚ñà‚ñà‚ñà            ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà                    ",
            "‚ñà‚ñà  ‚ñà‚ñà                            ‚ñà‚ñà             ‚ñà‚ñà                             ",
            "‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ",
            " ‚ñà‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ",
            "   ‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ",
            "‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà       ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ",
            " ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ",
            "                        ‚ñà‚ñà‚ñà‚ñà‚ñà                                                   ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 70, 6));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                                             ‚ñà               ‚ñà‚ñà‚ñà",
            "‚ñà ‚ñà‚ñà ‚ñà                                            ‚ñà‚ñà                ‚ñà‚ñà",
            "  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà",
            "  ‚ñà‚ñà     ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà",
            "  ‚ñà‚ñà     ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà",
            "  ‚ñà‚ñà     ‚ñà‚ñà     ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà  ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 16));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñà   ‚ñà‚ñà          ‚ñà‚ñà‚ñà       ‚ñà      ‚ñà‚ñà    ",
            "‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà           ‚ñà‚ñà      ‚ñà‚ñà            ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ",
            "‚ñà‚ñà ‚ñà ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ",
            "‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà    ‚ñà‚ñà    ",
            "‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ",
            "                                        ",
            "‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà                            ",
            " ‚ñà‚ñà                                     ",
            " ‚ñà‚ñà      ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà  ",
            " ‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ",
            " ‚ñà‚ñà   ‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà          ‚ñà‚ñà  ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà   ",
            "                                        ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 48, 8));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            " ‚ñà‚ñà‚ñà‚ñà      ‚ñà             ‚ñà‚ñà‚ñà               ‚ñà‚ñà‚ñà  ",
            "‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà              ‚ñà‚ñà                ‚ñà‚ñà  ",
            "‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà  ",
            " ‚ñà‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà  ",
            "   ‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ",
            "‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ",
            " ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà       ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà ",
            "                ‚ñà‚ñà‚ñà‚ñà‚ñà                           ",
        ]);
        expected.set_style(Rect::new(0, 0, 48, 8), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 24));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà             ‚ñà‚ñà‚ñà                  ",
            " ‚ñà‚ñà  ‚ñà‚ñà             ‚ñà‚ñà                  ",
            " ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà                  ",
            " ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà                  ",
            " ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà                  ",
            " ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà                  ",
            "‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà                 ",
            "                                        ",
            "  ‚ñà‚ñà‚ñà‚ñà                                  ",
            " ‚ñà‚ñà  ‚ñà‚ñà                                 ",
            "‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà   ",
            "‚ñà‚ñà       ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ",
            "‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ",
            " ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  ",
            "  ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà  ",
            "                                        ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà                            ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà                            ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà           ",
            " ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà          ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà          ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà              ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà           ",
            "                                        ",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 8), Style::new().red());
        expected.set_style(Rect::new(0, 8, 40, 8), Style::new().green());
        expected.set_style(Rect::new(0, 16, 32, 8), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_height_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfHeight)
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 80, 4));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñÄ‚ñÄ                     ‚ñÄ‚ñà‚ñà            ‚ñÄ‚ñà‚ñà‚ñÄ      ‚ñÄ‚ñÄ                    ",
            "‚ñÄ‚ñà‚ñà‚ñÑ     ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñÑ‚ñà‚ñÄ   ‚ñà‚ñà    ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñà‚ñà      ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ",
            "‚ñÑ‚ñÑ ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ‚ñÑ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñà‚ñà  ‚ñÑ‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ",
            " ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_height_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfHeight)
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 70, 3));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñÄ‚ñà‚ñà‚ñÄ‚ñà                                            ‚ñÑ‚ñà               ‚ñÄ‚ñà‚ñà",
            "  ‚ñà‚ñà    ‚ñÄ‚ñà‚ñÑ‚ñà‚ñÄ‚ñà‚ñÑ ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà",
            "  ‚ñà‚ñà     ‚ñà‚ñà  ‚ñÄ‚ñÄ ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñÑ‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà ‚ñÑ  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñà‚ñà  ‚ñà‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_height_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfHeight)
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 8));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà          ‚ñÄ‚ñà‚ñà      ‚ñÑ‚ñà      ‚ñÄ‚ñÄ    ",
            "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà     ‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ   ‚ñÄ‚ñà‚ñà    ",
            "‚ñà‚ñà ‚ñÄ ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñÑ    ‚ñà‚ñà    ",
            "‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ      ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ",
            "‚ñÄ‚ñà‚ñà‚ñÄ      ‚ñÄ‚ñÄ                            ",
            " ‚ñà‚ñà      ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ",
            " ‚ñà‚ñà  ‚ñÑ‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÑ  ",
            "‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_height_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfHeight)
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 48, 4));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñÑ‚ñà             ‚ñÄ‚ñà‚ñà               ‚ñÄ‚ñà‚ñà  ",
            "‚ñÄ‚ñà‚ñà‚ñÑ     ‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà  ",
            "‚ñÑ‚ñÑ ‚ñÄ‚ñà‚ñà    ‚ñà‚ñà ‚ñÑ  ‚ñÄ‚ñà‚ñÑ‚ñÑ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñà‚ñà  ‚ñà‚ñà  ",
            " ‚ñÄ‚ñÄ‚ñÄ‚ñÄ      ‚ñÄ‚ñÄ   ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ ",
        ]);
        expected.set_style(Rect::new(0, 0, 48, 4), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_height_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfHeight)
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 12));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ            ‚ñÄ‚ñà‚ñà                  ",
            " ‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñÄ ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà                  ",
            " ‚ñà‚ñà ‚ñÄ‚ñà‚ñÑ ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñà‚ñà  ‚ñà‚ñà                  ",
            "‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ                 ",
            " ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ                                 ",
            "‚ñà‚ñà      ‚ñÄ‚ñà‚ñÑ‚ñà‚ñÄ‚ñà‚ñÑ ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ",
            "‚ñÄ‚ñà‚ñÑ ‚ñÄ‚ñà‚ñà  ‚ñà‚ñà  ‚ñÄ‚ñÄ ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñà‚ñà  ‚ñà‚ñà  ",
            "  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ‚ñÄ‚ñÄ     ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ  ",
            "‚ñÄ‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñÄ‚ñà‚ñà                            ",
            " ‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñÄ   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ          ",
            " ‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ          ",
            "‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ   ‚ñÄ‚ñÄ‚ñÄ‚ñÄ    ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ           ",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 4), Style::new().red());
        expected.set_style(Rect::new(0, 4, 40, 4), Style::new().green());
        expected.set_style(Rect::new(0, 8, 32, 4), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_width_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfWidth)
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 8));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñê‚ñà‚ñå  ‚ñà          ‚ñê‚ñà      ‚ñà‚ñà   ‚ñà          ",
            "‚ñà ‚ñà              ‚ñà      ‚ñê‚ñå              ",
            "‚ñà‚ñå  ‚ñê‚ñà  ‚ñà‚ñà‚ñå ‚ñê‚ñà‚ñê‚ñå ‚ñà  ‚ñê‚ñà‚ñå ‚ñê‚ñå  ‚ñê‚ñà  ‚ñà‚ñà‚ñå ‚ñê‚ñà‚ñå ",
            "‚ñê‚ñà   ‚ñà  ‚ñà ‚ñà ‚ñà ‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñê‚ñå   ‚ñà  ‚ñà ‚ñà ‚ñà ‚ñà ",
            " ‚ñê‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñà ‚ñà  ‚ñà  ‚ñà‚ñà‚ñà ‚ñê‚ñå ‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñà‚ñà ",
            "‚ñà ‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñê‚ñà‚ñà  ‚ñà  ‚ñà   ‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà   ",
            "‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñà ‚ñà   ‚ñà ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñà‚ñà‚ñà‚ñå‚ñê‚ñà‚ñå ‚ñà ‚ñà ‚ñê‚ñà‚ñå ",
            "            ‚ñà‚ñà‚ñå                         ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_width_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfWidth)
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 35, 6));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñà‚ñà                      ‚ñê       ‚ñê‚ñà",
            "‚ñå‚ñà‚ñê                      ‚ñà        ‚ñà",
            " ‚ñà  ‚ñà‚ñê‚ñà ‚ñà ‚ñà ‚ñà‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñà ‚ñê‚ñà‚ñå   ‚ñà",
            " ‚ñà  ‚ñê‚ñà‚ñê‚ñå‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà   ‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñê‚ñà‚ñà",
            " ‚ñà  ‚ñê‚ñå‚ñê‚ñå‚ñà ‚ñà ‚ñà ‚ñà ‚ñà   ‚ñê‚ñà‚ñà  ‚ñà  ‚ñà‚ñà‚ñà ‚ñà ‚ñà",
            " ‚ñà  ‚ñê‚ñå  ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà  ‚ñà‚ñê ‚ñà   ‚ñà ‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_width_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfWidth)
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 16));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà ‚ñê‚ñå    ‚ñê‚ñà   ‚ñê   ‚ñà  ",
            "‚ñà‚ñå‚ñà‚ñå     ‚ñà   ‚ñà      ",
            "‚ñà‚ñà‚ñà‚ñå‚ñà ‚ñà  ‚ñà  ‚ñê‚ñà‚ñà ‚ñê‚ñà  ",
            "‚ñà‚ñà‚ñà‚ñå‚ñà ‚ñà  ‚ñà   ‚ñà   ‚ñà  ",
            "‚ñà‚ñê‚ñê‚ñå‚ñà ‚ñà  ‚ñà   ‚ñà   ‚ñà  ",
            "‚ñà ‚ñê‚ñå‚ñà ‚ñà  ‚ñà   ‚ñà‚ñê  ‚ñà  ",
            "‚ñà ‚ñê‚ñå‚ñê‚ñà‚ñê‚ñå‚ñê‚ñà‚ñå  ‚ñê‚ñå ‚ñê‚ñà‚ñå ",
            "                    ",
            "‚ñà‚ñà   ‚ñà              ",
            "‚ñê‚ñå                  ",
            "‚ñê‚ñå  ‚ñê‚ñà  ‚ñà‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñà ",
            "‚ñê‚ñå   ‚ñà  ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà   ",
            "‚ñê‚ñå ‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñà‚ñà ‚ñê‚ñà‚ñå ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà     ‚ñà ",
            "‚ñà‚ñà‚ñà‚ñå‚ñê‚ñà‚ñå ‚ñà ‚ñà ‚ñê‚ñà‚ñå ‚ñà‚ñà‚ñå ",
            "                    ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_width_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfWidth)
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 24, 8));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñê‚ñà‚ñå  ‚ñê      ‚ñê‚ñà       ‚ñê‚ñà ",
            "‚ñà ‚ñà  ‚ñà       ‚ñà        ‚ñà ",
            "‚ñà‚ñå  ‚ñê‚ñà‚ñà ‚ñà ‚ñà  ‚ñà  ‚ñê‚ñà‚ñå   ‚ñà ",
            "‚ñê‚ñà   ‚ñà  ‚ñà ‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñê‚ñà‚ñà ",
            " ‚ñê‚ñà  ‚ñà  ‚ñà ‚ñà  ‚ñà  ‚ñà‚ñà‚ñà ‚ñà ‚ñà ",
            "‚ñà ‚ñà  ‚ñà‚ñê ‚ñê‚ñà‚ñà  ‚ñà  ‚ñà   ‚ñà ‚ñà ",
            "‚ñê‚ñà‚ñå  ‚ñê‚ñå   ‚ñà ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñê‚ñå",
            "        ‚ñà‚ñà‚ñå             ",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 8), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_width_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::HalfWidth)
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 24));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñà‚ñà‚ñà      ‚ñê‚ñà         ",
            "‚ñê‚ñå‚ñê‚ñå      ‚ñà         ",
            "‚ñê‚ñå‚ñê‚ñå‚ñê‚ñà‚ñå   ‚ñà         ",
            "‚ñê‚ñà‚ñà ‚ñà ‚ñà ‚ñê‚ñà‚ñà         ",
            "‚ñê‚ñå‚ñà ‚ñà‚ñà‚ñà ‚ñà ‚ñà         ",
            "‚ñê‚ñå‚ñê‚ñå‚ñà   ‚ñà ‚ñà         ",
            "‚ñà‚ñå‚ñê‚ñå‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñê‚ñå        ",
            "                    ",
            " ‚ñà‚ñà                 ",
            "‚ñê‚ñå‚ñê‚ñå                ",
            "‚ñà   ‚ñà‚ñê‚ñà ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñà‚ñà‚ñå ",
            "‚ñà   ‚ñê‚ñà‚ñê‚ñå‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ",
            "‚ñà ‚ñà‚ñå‚ñê‚ñå‚ñê‚ñå‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà ‚ñà ",
            "‚ñê‚ñå‚ñê‚ñå‚ñê‚ñå  ‚ñà   ‚ñà   ‚ñà ‚ñà ",
            " ‚ñà‚ñà‚ñå‚ñà‚ñà  ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñå ‚ñà ‚ñà ",
            "                    ",
            "‚ñà‚ñà‚ñà ‚ñê‚ñà              ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà              ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñê‚ñà‚ñå     ",
            "‚ñê‚ñà‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñà ‚ñà     ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñà‚ñà     ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà       ",
            "‚ñà‚ñà‚ñà ‚ñê‚ñà‚ñå ‚ñê‚ñà‚ñê‚ñå‚ñê‚ñà‚ñå     ",
            "                    ",
        ]);
        expected.set_style(Rect::new(0, 0, 12, 8), Style::new().red());
        expected.set_style(Rect::new(0, 8, 20, 8), Style::new().green());
        expected.set_style(Rect::new(0, 16, 16, 8), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_size_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Quadrant)
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 4));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñü‚ñÄ‚ñô  ‚ñÄ          ‚ñù‚ñà      ‚ñú‚ñõ   ‚ñÄ          ",
            "‚ñú‚ñô  ‚ñù‚ñà  ‚ñà‚ñÄ‚ñô ‚ñü‚ñÄ‚ñü‚ñò ‚ñà  ‚ñü‚ñÄ‚ñô ‚ñê‚ñå  ‚ñù‚ñà  ‚ñà‚ñÄ‚ñô ‚ñü‚ñÄ‚ñô ",
            "‚ñÑ‚ñù‚ñà  ‚ñà  ‚ñà ‚ñà ‚ñú‚ñÑ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñÄ ‚ñê‚ñå‚ñó‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñÄ‚ñÄ ",
            "‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñò ‚ñÄ ‚ñÄ ‚ñÑ‚ñÑ‚ñõ ‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñò ‚ñÄ‚ñÄ‚ñÄ‚ñò‚ñù‚ñÄ‚ñò ‚ñÄ ‚ñÄ ‚ñù‚ñÄ‚ñò ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_size_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Quadrant)
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 35, 3));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñõ‚ñà‚ñú                      ‚ñü       ‚ñù‚ñà",
            " ‚ñà  ‚ñú‚ñü‚ñú‚ññ‚ñà ‚ñà ‚ñà‚ñÄ‚ñô ‚ñü‚ñÄ‚ñô ‚ñù‚ñÄ‚ñô ‚ñù‚ñà‚ñÄ ‚ñü‚ñÄ‚ñô ‚ñó‚ñÑ‚ñà",
            " ‚ñà  ‚ñê‚ñå‚ñù‚ñò‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñÑ ‚ñü‚ñÄ‚ñà  ‚ñà‚ñó ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_size_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Quadrant)
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 8));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ññ‚ñü‚ñå    ‚ñù‚ñà   ‚ñü   ‚ñÄ  ",
            "‚ñà‚ñà‚ñà‚ñå‚ñà ‚ñà  ‚ñà  ‚ñù‚ñà‚ñÄ ‚ñù‚ñà  ",
            "‚ñà‚ñù‚ñê‚ñå‚ñà ‚ñà  ‚ñà   ‚ñà‚ñó  ‚ñà  ",
            "‚ñÄ ‚ñù‚ñò‚ñù‚ñÄ‚ñù‚ñò‚ñù‚ñÄ‚ñò  ‚ñù‚ñò ‚ñù‚ñÄ‚ñò ",
            "‚ñú‚ñõ   ‚ñÄ              ",
            "‚ñê‚ñå  ‚ñù‚ñà  ‚ñà‚ñÄ‚ñô ‚ñü‚ñÄ‚ñô ‚ñü‚ñÄ‚ñÄ ",
            "‚ñê‚ñå‚ñó‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñù‚ñÄ‚ñô ",
            "‚ñÄ‚ñÄ‚ñÄ‚ñò‚ñù‚ñÄ‚ñò ‚ñÄ ‚ñÄ ‚ñù‚ñÄ‚ñò ‚ñÄ‚ñÄ‚ñò ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_size_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Quadrant)
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 24, 4));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñü‚ñÄ‚ñô  ‚ñü      ‚ñù‚ñà       ‚ñù‚ñà ",
            "‚ñú‚ñô  ‚ñù‚ñà‚ñÄ ‚ñà ‚ñà  ‚ñà  ‚ñü‚ñÄ‚ñô ‚ñó‚ñÑ‚ñà ",
            "‚ñÑ‚ñù‚ñà  ‚ñà‚ñó ‚ñú‚ñÑ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà ",
            "‚ñù‚ñÄ‚ñò  ‚ñù‚ñò ‚ñÑ‚ñÑ‚ñõ ‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñù‚ñò",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 4), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_half_size_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Quadrant)
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 12));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "‚ñú‚ñõ‚ñú‚ññ     ‚ñù‚ñà         ",
            "‚ñê‚ñô‚ñü‚ñò‚ñü‚ñÄ‚ñô ‚ñó‚ñÑ‚ñà         ",
            "‚ñê‚ñå‚ñú‚ññ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà         ",
            "‚ñÄ‚ñò‚ñù‚ñò‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñù‚ñò        ",
            "‚ñó‚ñõ‚ñú‚ññ                ",
            "‚ñà   ‚ñú‚ñü‚ñú‚ññ‚ñü‚ñÄ‚ñô ‚ñü‚ñÄ‚ñô ‚ñà‚ñÄ‚ñô ",
            "‚ñú‚ññ‚ñú‚ñå‚ñê‚ñå‚ñù‚ñò‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà ",
            " ‚ñÄ‚ñÄ‚ñò‚ñÄ‚ñÄ  ‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñò ‚ñÄ ‚ñÄ ",
            "‚ñú‚ñõ‚ñú‚ññ‚ñù‚ñà              ",
            "‚ñê‚ñô‚ñü‚ñò ‚ñà  ‚ñà ‚ñà ‚ñü‚ñÄ‚ñô     ",
            "‚ñê‚ñå‚ñê‚ñå ‚ñà  ‚ñà ‚ñà ‚ñà‚ñÄ‚ñÄ     ",
            "‚ñÄ‚ñÄ‚ñÄ ‚ñù‚ñÄ‚ñò ‚ñù‚ñÄ‚ñù‚ñò‚ñù‚ñÄ‚ñò     ",
        ]);
        expected.set_style(Rect::new(0, 0, 12, 4), Style::new().red());
        expected.set_style(Rect::new(0, 4, 20, 4), Style::new().green());
        expected.set_style(Rect::new(0, 8, 16, 4), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_third_height_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::ThirdHeight)
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 80, 3));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "ü¨π‚ñàü¨∞ü¨Çü¨éü¨ã   ü¨≠ü¨∞ü¨∞    ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ ü¨≠ü¨≠  ü¨Ç‚ñà‚ñà     ü¨≠ü¨≠ü¨≠ü¨≠   ü¨Ç‚ñà‚ñàü¨Ç     ü¨≠ü¨∞ü¨∞    ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠   ",
            "ü¨≠ü¨∞ü¨Çü¨éü¨πü¨π    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ü¨é‚ñàü¨≠ü¨≠‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñàü¨ãü¨ãü¨éü¨é   ‚ñà‚ñà  ü¨≠ü¨π   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ",
            " ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Ç  ü¨Çü¨Ç  ü¨ãü¨ãü¨ãü¨ãü¨éü¨Ç   ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Çü¨Çü¨Çü¨Çü¨Çü¨Ç  ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Ç  ü¨Çü¨Ç   ü¨Çü¨Çü¨Çü¨Ç   ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_third_height_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::ThirdHeight)
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 70, 2));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "ü¨éü¨Ç‚ñà‚ñàü¨Çü¨é  ü¨≠ü¨≠ ü¨≠ü¨≠ü¨≠  ü¨≠ü¨≠  ü¨≠ü¨≠  ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨π‚ñàü¨≠ü¨≠   ü¨≠ü¨≠ü¨≠ü¨≠      ü¨Ç‚ñà‚ñà",
            "  ‚ñà‚ñà     ‚ñà‚ñàü¨Ç ü¨éü¨é ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ü¨∞ü¨∞  ü¨≠ü¨πü¨ãü¨ã‚ñà‚ñà    ‚ñà‚ñà ü¨≠  ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ü¨π‚ñàü¨Çü¨Ç‚ñà‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_third_height_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::ThirdHeight)
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 6));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñà‚ñàü¨πü¨≠ü¨π‚ñà‚ñà ü¨≠ü¨≠  ü¨≠ü¨≠   ü¨Ç‚ñà‚ñà     ü¨≠ü¨π‚ñàü¨≠ü¨≠   ü¨≠ü¨∞ü¨∞    ",
            "‚ñà‚ñàü¨Çü¨éü¨Ç‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ü¨≠    ‚ñà‚ñà    ",
            "ü¨Çü¨Ç   ü¨Çü¨Ç  ü¨Çü¨Çü¨Ç ü¨Çü¨Ç  ü¨Çü¨Çü¨Çü¨Ç      ü¨Çü¨Ç    ü¨Çü¨Çü¨Çü¨Ç   ",
            "ü¨Ç‚ñà‚ñàü¨Ç     ü¨≠ü¨∞ü¨∞    ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠  ",
            " ‚ñà‚ñà  ü¨≠ü¨π   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ü¨Çü¨éü¨ãü¨ãü¨πü¨≠  ",
            "ü¨Çü¨Çü¨Çü¨Çü¨Çü¨Çü¨Ç  ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Ç  ü¨Çü¨Ç   ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Çü¨Çü¨Çü¨Ç   ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_third_height_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::ThirdHeight)
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 48, 3));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "ü¨π‚ñàü¨∞ü¨Çü¨éü¨ã   ü¨≠ü¨π‚ñàü¨≠ü¨≠  ü¨≠ü¨≠  ü¨≠ü¨≠   ü¨Ç‚ñà‚ñà     ü¨≠ü¨≠ü¨≠ü¨≠      ü¨Ç‚ñà‚ñà  ",
            "ü¨≠ü¨∞ü¨Çü¨éü¨πü¨π    ‚ñà‚ñà ü¨≠  ü¨é‚ñàü¨≠ü¨≠‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ü¨π‚ñàü¨Çü¨Ç‚ñà‚ñà  ",
            " ü¨Çü¨Çü¨Çü¨Ç      ü¨Çü¨Ç   ü¨ãü¨ãü¨ãü¨ãü¨éü¨Ç   ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Ç ü¨Çü¨Ç ",
        ]);
        expected.set_style(Rect::new(0, 0, 48, 3), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_third_height_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::ThirdHeight)
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 9));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "ü¨Ç‚ñà‚ñàü¨Çü¨Ç‚ñàü¨π  ü¨≠ü¨≠ü¨≠ü¨≠      ü¨Ç‚ñà‚ñà                  ",
            " ‚ñà‚ñàü¨Çü¨é‚ñàü¨≠ ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ü¨π‚ñàü¨Çü¨Ç‚ñà‚ñà                  ",
            "ü¨Çü¨Çü¨Ç  ü¨Çü¨Ç  ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Ç ü¨Çü¨Ç                 ",
            "ü¨≠ü¨πü¨éü¨Çü¨Çü¨éü¨ã ü¨≠ü¨≠ ü¨≠ü¨≠ü¨≠   ü¨≠ü¨≠ü¨≠ü¨≠    ü¨≠ü¨≠ü¨≠ü¨≠   ü¨≠ü¨≠ü¨≠ü¨≠ü¨≠   ",
            "ü¨é‚ñàü¨≠ ü¨ãü¨πü¨π  ‚ñà‚ñàü¨Ç ü¨éü¨é ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ‚ñà‚ñàü¨ãü¨ãü¨éü¨é  ‚ñà‚ñà  ‚ñà‚ñà  ",
            "  ü¨Çü¨Çü¨Çü¨Çü¨Ç ü¨Çü¨Çü¨Çü¨Ç     ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Ç  ü¨Çü¨Ç  ",
            "ü¨Ç‚ñà‚ñàü¨Çü¨Ç‚ñàü¨π  ü¨Ç‚ñà‚ñà    ü¨≠ü¨≠  ü¨≠ü¨≠   ü¨≠ü¨≠ü¨≠ü¨≠           ",
            " ‚ñà‚ñàü¨Çü¨Ç‚ñàü¨π   ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñàü¨ãü¨ãü¨éü¨é          ",
            "ü¨Çü¨Çü¨Çü¨Çü¨Çü¨Ç   ü¨Çü¨Çü¨Çü¨Ç    ü¨Çü¨Çü¨Ç ü¨Çü¨Ç  ü¨Çü¨Çü¨Çü¨Ç           ",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 3), Style::new().red());
        expected.set_style(Rect::new(0, 3, 40, 3), Style::new().green());
        expected.set_style(Rect::new(0, 6, 32, 3), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_sextant_size_single_line() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Sextant)
            .lines(vec![Line::from("SingleLine")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 40, 3));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "ü¨ªü¨íü¨å ü¨ûü¨∞  ü¨≠ü¨≠ü¨è ü¨ûü¨≠ü¨ûü¨èü¨Å‚ñà  ü¨ûü¨≠ü¨è ü¨®ü¨ï  ü¨ûü¨∞  ü¨≠ü¨≠ü¨è ü¨ûü¨≠ü¨è ",
            "ü¨Øü¨äü¨π  ‚ñà  ‚ñà ‚ñà ü¨¨ü¨≠‚ñà  ‚ñà  ‚ñàü¨ãü¨é ‚ñê‚ñåü¨ûü¨ì ‚ñà  ‚ñà ‚ñà ‚ñàü¨ãü¨é ",
            "ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä ü¨Ç ü¨Ç ü¨ãü¨ãü¨Ü ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä ü¨Çü¨Çü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Ç ü¨Ç ü¨Åü¨Çü¨Ä ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_sextant_size_truncated() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Sextant)
            .lines(vec![Line::from("Truncated")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 35, 2));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "ü¨Ü‚ñàü¨ä ü¨≠ü¨ûü¨≠ ü¨≠ ü¨≠ ü¨≠ü¨≠ü¨è ü¨ûü¨≠ü¨è ü¨ûü¨≠ü¨è ü¨ûü¨ªü¨≠ ü¨ûü¨≠ü¨è  ü¨Å‚ñà",
            " ‚ñà  ‚ñêü¨ïü¨âü¨Ñ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ü¨∞ ü¨µü¨ã‚ñà  ‚ñàü¨û ‚ñàü¨ãü¨é ü¨ªü¨Ç‚ñà",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_sextant_size_multiple_lines() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Sextant)
            .lines(vec![Line::from("Multi"), Line::from("Lines")])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 6));
        big_text.render(buf.area, &mut buf);
        let expected = Buffer::with_lines(vec![
            "‚ñàü¨±ü¨ª‚ñåü¨≠ ü¨≠ ü¨Å‚ñà  ü¨ûü¨ªü¨≠ ü¨ûü¨∞  ",
            "‚ñàü¨äü¨®‚ñå‚ñà ‚ñà  ‚ñà   ‚ñàü¨û  ‚ñà  ",
            "ü¨Ç ü¨Åü¨Äü¨Åü¨Çü¨Åü¨Äü¨Åü¨Çü¨Ä  ü¨Åü¨Ä ü¨Åü¨Çü¨Ä ",
            "ü¨®ü¨ï  ü¨ûü¨∞  ü¨≠ü¨≠ü¨è ü¨ûü¨≠ü¨è ü¨ûü¨≠ü¨≠ ",
            "‚ñê‚ñåü¨ûü¨ì ‚ñà  ‚ñà ‚ñà ‚ñàü¨ãü¨é ü¨äü¨ãü¨± ",
            "ü¨Çü¨Çü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Ç ü¨Ç ü¨Åü¨Çü¨Ä ü¨Çü¨Çü¨Ä ",
        ]);
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_sextant_size_widget_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Sextant)
            .lines(vec![Line::from("Styled")])
            .style(Style::new().bold())
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 24, 3));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "ü¨ªü¨íü¨å ü¨ûü¨ªü¨≠ ü¨≠ ü¨≠ ü¨Å‚ñà  ü¨ûü¨≠ü¨è  ü¨Å‚ñà ",
            "ü¨Øü¨äü¨π  ‚ñàü¨û ü¨¨ü¨≠‚ñà  ‚ñà  ‚ñàü¨ãü¨é ü¨ªü¨Ç‚ñà ",
            "ü¨Åü¨Çü¨Ä  ü¨Åü¨Ä ü¨ãü¨ãü¨Ü ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Åü¨Ä",
        ]);
        expected.set_style(Rect::new(0, 0, 24, 3), Style::new().bold());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn render_sextant_size_line_style() -> Result<()> {
        let big_text = BigTextBuilder::default()
            .pixel_size(PixelSize::Sextant)
            .lines(vec![
                Line::from("Red".red()),
                Line::from("Green".green()),
                Line::from("Blue".blue()),
            ])
            .build()?;
        let mut buf = Buffer::empty(Rect::new(0, 0, 20, 9));
        big_text.render(buf.area, &mut buf);
        let mut expected = Buffer::with_lines(vec![
            "ü¨®ü¨ïü¨®ü¨ìü¨ûü¨≠ü¨è  ü¨Å‚ñà         ",
            "‚ñêü¨ïü¨¨ü¨è‚ñàü¨ãü¨é ü¨ªü¨Ç‚ñà         ",
            "ü¨Çü¨Äü¨Åü¨Äü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Åü¨Ä        ",
            "ü¨µü¨Üü¨äü¨Éü¨≠ü¨ûü¨≠ ü¨ûü¨≠ü¨è ü¨ûü¨≠ü¨è ü¨≠ü¨≠ü¨è ",
            "ü¨¨ü¨èü¨©ü¨ì‚ñêü¨ïü¨âü¨Ñ‚ñàü¨ãü¨é ‚ñàü¨ãü¨é ‚ñà ‚ñà ",
            " ü¨Çü¨Çü¨Äü¨Çü¨Ç  ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä ü¨Ç ü¨Ç ",
            "ü¨®ü¨ïü¨®ü¨ìü¨Å‚ñà  ü¨≠ ü¨≠ ü¨ûü¨≠ü¨è     ",
            "‚ñêü¨ïü¨®ü¨ì ‚ñà  ‚ñà ‚ñà ‚ñàü¨ãü¨é     ",
            "ü¨Çü¨Çü¨Ç ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Åü¨Äü¨Åü¨Çü¨Ä     ",
        ]);
        expected.set_style(Rect::new(0, 0, 12, 3), Style::new().red());
        expected.set_style(Rect::new(0, 3, 20, 3), Style::new().green());
        expected.set_style(Rect::new(0, 6, 16, 3), Style::new().blue());
        assert_buffer_eq!(buf, expected);
        Ok(())
    }

    #[test]
    fn check_quadrant_size_symbols() -> Result<()> {
        assert_eq!(get_symbol_quadrant_size(0, 0, 0, 0), ' ');
        assert_eq!(get_symbol_quadrant_size(1, 0, 0, 0), '‚ñò');
        assert_eq!(get_symbol_quadrant_size(0, 1, 0, 0), '‚ñù');
        assert_eq!(get_symbol_quadrant_size(1, 1, 0, 0), '‚ñÄ');
        assert_eq!(get_symbol_quadrant_size(0, 0, 1, 0), '‚ññ');
        assert_eq!(get_symbol_quadrant_size(1, 0, 1, 0), '‚ñå');
        assert_eq!(get_symbol_quadrant_size(0, 1, 1, 0), '‚ñû');
        assert_eq!(get_symbol_quadrant_size(1, 1, 1, 0), '‚ñõ');
        assert_eq!(get_symbol_quadrant_size(0, 0, 0, 1), '‚ñó');
        assert_eq!(get_symbol_quadrant_size(1, 0, 0, 1), '‚ñö');
        assert_eq!(get_symbol_quadrant_size(0, 1, 0, 1), '‚ñê');
        assert_eq!(get_symbol_quadrant_size(1, 1, 0, 1), '‚ñú');
        assert_eq!(get_symbol_quadrant_size(0, 0, 1, 1), '‚ñÑ');
        assert_eq!(get_symbol_quadrant_size(1, 0, 1, 1), '‚ñô');
        assert_eq!(get_symbol_quadrant_size(0, 1, 1, 1), '‚ñü');
        assert_eq!(get_symbol_quadrant_size(1, 1, 1, 1), '‚ñà');
        Ok(())
    }

    #[test]
    fn check_sextant_size_symbols() -> Result<()> {
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 0, 0, 0), ' ');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 0, 0, 0), 'ü¨Ä');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 0, 0, 0), 'ü¨Å');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 0, 0, 0), 'ü¨Ç');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 0, 0, 0), 'ü¨É');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 0, 0, 0), 'ü¨Ñ');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 0, 0, 0), 'ü¨Ö');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 0, 0, 0), 'ü¨Ü');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 1, 0, 0), 'ü¨á');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 1, 0, 0), 'ü¨à');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 1, 0, 0), 'ü¨â');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 1, 0, 0), 'ü¨ä');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 1, 0, 0), 'ü¨ã');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 1, 0, 0), 'ü¨å');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 1, 0, 0), 'ü¨ç');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 1, 0, 0), 'ü¨é');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 0, 1, 0), 'ü¨è');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 0, 1, 0), 'ü¨ê');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 0, 1, 0), 'ü¨ë');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 0, 1, 0), 'ü¨í');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 0, 1, 0), 'ü¨ì');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 0, 1, 0), '‚ñå');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 0, 1, 0), 'ü¨î');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 0, 1, 0), 'ü¨ï');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 1, 1, 0), 'ü¨ñ');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 1, 1, 0), 'ü¨ó');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 1, 1, 0), 'ü¨ò');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 1, 1, 0), 'ü¨ô');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 1, 1, 0), 'ü¨ö');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 1, 1, 0), 'ü¨õ');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 1, 1, 0), 'ü¨ú');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 1, 1, 0), 'ü¨ù');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 0, 0, 1), 'ü¨û');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 0, 0, 1), 'ü¨ü');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 0, 0, 1), 'ü¨†');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 0, 0, 1), 'ü¨°');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 0, 0, 1), 'ü¨¢');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 0, 0, 1), 'ü¨£');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 0, 0, 1), 'ü¨§');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 0, 0, 1), 'ü¨•');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 1, 0, 1), 'ü¨¶');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 1, 0, 1), 'ü¨ß');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 1, 0, 1), '‚ñê');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 1, 0, 1), 'ü¨®');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 1, 0, 1), 'ü¨©');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 1, 0, 1), 'ü¨™');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 1, 0, 1), 'ü¨´');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 1, 0, 1), 'ü¨¨');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 0, 1, 1), 'ü¨≠');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 0, 1, 1), 'ü¨Æ');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 0, 1, 1), 'ü¨Ø');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 0, 1, 1), 'ü¨∞');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 0, 1, 1), 'ü¨±');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 0, 1, 1), 'ü¨≤');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 0, 1, 1), 'ü¨≥');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 0, 1, 1), 'ü¨¥');
        assert_eq!(get_symbol_sextantant_size(0, 0, 0, 1, 1, 1), 'ü¨µ');
        assert_eq!(get_symbol_sextantant_size(1, 0, 0, 1, 1, 1), 'ü¨∂');
        assert_eq!(get_symbol_sextantant_size(0, 1, 0, 1, 1, 1), 'ü¨∑');
        assert_eq!(get_symbol_sextantant_size(1, 1, 0, 1, 1, 1), 'ü¨∏');
        assert_eq!(get_symbol_sextantant_size(0, 0, 1, 1, 1, 1), 'ü¨π');
        assert_eq!(get_symbol_sextantant_size(1, 0, 1, 1, 1, 1), 'ü¨∫');
        assert_eq!(get_symbol_sextantant_size(0, 1, 1, 1, 1, 1), 'ü¨ª');
        assert_eq!(get_symbol_sextantant_size(1, 1, 1, 1, 1, 1), '‚ñà');
        Ok(())
    }

    #[test]
    fn check_third_height_symbols() -> Result<()> {
        assert_eq!(get_symbol_third_height(0, 0, 0), ' ');
        assert_eq!(get_symbol_third_height(1, 0, 0), 'ü¨Ç');
        assert_eq!(get_symbol_third_height(0, 1, 0), 'ü¨ã');
        assert_eq!(get_symbol_third_height(1, 1, 0), 'ü¨é');
        assert_eq!(get_symbol_third_height(0, 0, 1), 'ü¨≠');
        assert_eq!(get_symbol_third_height(1, 0, 1), 'ü¨∞');
        assert_eq!(get_symbol_third_height(0, 1, 1), 'ü¨π');
        assert_eq!(get_symbol_third_height(1, 1, 1), '‚ñà');
        Ok(())
    }
}
